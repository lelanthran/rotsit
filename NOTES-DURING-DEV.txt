
Revenge of the SIT
------------------

A rewrite of the original Simple Issue Tracker. The issue tracker works
with a text file that can be stored in version control. Text utilities
must work on this textfile (diff/merge, etc) to allow the VCS (version
control system) to manage the issues.



File format
-----------

The issues database is stored in a plain text file. No header exists for
this file. The file consists of a list of records. Each records consists
of a list of fields. All fields are plain ascii text only, with the bytes
0x00 and 0x08 reserved for use by the program.

Records are delimited by the character sequence "f\b\n". Fields are
delimited by the character sequence "f\b".


NOTES WHILE DEVELOPING

Parsing general arithmetic expressions
--------------------------------------

Using two stacks we can evaluate any arithmetic expression (boolean
filters are a specialised instance of general arithmetic) while
implementing precedence.

One stack holds the operands, the other holds the operators. Each time we
encounter a CLOSE token (either ')'  or ']' or similar) pop two operands
and the last operator and evaluate that single expression. We then push
the result back onto the operand stack and continue. Each time we
encounter a "*" or "/" operator we pop one operand and one operator and
apply the expression and push the result onto the operand stack.

Once we get to the end of the input we repeatedly pop 2 operands and 1
operator, applying the operator to the operand and pushing the result into
the operand stack.

(field1 > value1 and field2 < value2)     # expr1, expr2
   or (field3 == value3)                  # expr3
   or field4 != value4                    # expr4

st1                     st2               token[i]
                                          (
                                          field1
field1                                    >
field1                  >                 value1
field1,value1           >                 )
TF                                        and
TF                      AND               field2
TF,field2               AND               <
TF,field2               AND,<             value2
TF,field2,value2        AND,<             )
TF,TF                   AND               or
TF,TF                   AND,OR            (
TF,TF                   AND,OR            field3
TF,TF,field3            AND,OR            ==
TF,TF,field3            AND,OR,==         value3
TF,TF,field3,value3     AND,OR,==         )
TF,TF,TF                AND,OR            or
TF,TF,TF                AND,OR,OR         field4
TF,TF,TF,field4         AND,OR,OR         !=
TF,TF,TF,field4         AND,OR,OR,!=      value4
TF,TF,TF,field4,value4  AND,OR,OR,!=      EOF
TF,TF,TF,TF             AND,OR,OR
TF,TF,TF                AND,OR
TF,TF                   AND
TF


// Caller must supply run_op (void *, void *, void *) and
// token_type (void *)
//
bool apply (st1, st2) {
   rhs = pop (st1);
   lhs = pop (st1);
   op = pop (st2);
   if (!lhs || !rhs || !op) {
      return false;
   }
   return push (st1, run_op (op, lhs, rhs)) ? true : false;
}

// We (maybe) use close_op to enforce closing brace to be the same as the
// opening one. There is no need for this, however it does allow the
// writer to attempt to enforce layers of braces.
void *eval (void *tokens[]) {
   for (i=0; tokens[i]; i++) {

      switch (token_type (tokens[i])) {

         // High precedence operators = immediate execution
         case MUL_DIV:  push (st1, tokens[i]);
                        push (st2, tokens[i]);
                        if (!apply (st1, st2))
                           return NULL;
                        break;

         // Can execute this at the end
         case LOW_OPS:  push (st2, tokens[i]);
                        break;

         case OPERAND:  push (st1, tokens[i]);
                        break;

         case OPEN:     close_op = tokens[i];
                        break;

         case CLOSE:    apply (st1, st2);
                        break;
   }
   while (length (st1)>=2 && length (st2))
      if (!apply (st1, st2))
         return NULL;

   if (length(st1)!=1 || length(st2)!=0)
      return NULL;

   return pop (st1);
}

